variable "model_api_name" {
  description = "Name of Api Gateway Model"
  type        = list(string)
  default     = []
}

variable "model_api_description" {
  description = "Description of Api Gateway Model"
  type        = list(string)
  default     = []
}

variable "model_api_content_type" {
  description = "Content type of Api Gateway Model"
  type        = list(string)
  default     = []
}

variable "access_log_format" {
  description = "The formatting and values recorded in the logs. For more information on configuring the log format rules visit the AWS documentation"
  type        = string
  default     = ""
}

variable "api_key_requireds" {
  description = "Specify if the method requires an API key."
  type        = list(bool)
  default     = [false]
}

variable "api_vpclink_id" {
  description = "vpc link id generated by istio"
  type        = string
  default     = null
}

variable "stage_variable_lb" {
  description = "dns name generated by lad balancer"
  type        = string
  default     = null
}

variable "api_vpclink_name" {
  description = "The name used to label and identify the VPC link."
  type        = string
  default     = ""
}

variable "authorizations" {
  description = "The type of authorization used for the method (NONE, CUSTOM, AWS_IAM, COGNITO_USER_POOLS)."
  type        = list(any)
  default     = []
}

variable "authorization_scopes" {
  description = "The authorization scopes used when the authorization is COGNITO_USER_POOLS"
  type        = list(any)
  default     = []
}

variable "authorizer_credentials" {
  description = "The credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN."
  type        = string
  default     = ""
}

variable "authorizer_ids" {
  description = "The authorizer id to be used when the authorization is CUSTOM or COGNITO_USER_POOLS."
  type        = list(any)
  default     = []
}

variable "authorizer_names" {
  description = "The name of the authorizer"
  type        = string
  default     = ""
}

variable "authorizer_result_ttl_in_seconds" {
  description = "The TTL of cached authorizer results in seconds. Defaults to 300."
  type        = number
  default     = 300
}

variable "authorizer_types" {
  description = "The type of the authorizer. Possible values are TOKEN for a Lambda function using a single authorization token submitted in a custom header, REQUEST for a Lambda function using incoming request parameters, or COGNITO_USER_POOLS for using an Amazon Cognito user pool. Defaults to TOKEN."
  type        = string
  default     = ""
}

variable "authorizer_uri" {
  description = "The authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of arn:aws:apigateway:{region}:lambda:path/{service_api}, e.g., arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations"
  type        = string
  default     = ""
}

variable "cache_key_parameters" {
  description = "A list of cache key parameters for the integration."
  type        = list(any)
  default     = []
}

variable "cache_namespaces" {
  description = "The integration's cache namespace."
  type        = list(any)
  default     = []
}

variable "certificate_arn" {
  description = "ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with certificate_name, certificate_body, certificate_chain, certificate_private_key, regional_certificate_arn, and regional_certificate_name."
  type        = string
  default     = ""
}

variable "cloudwatch_log_group_kms_key_id" {
  description = "The ARN of the KMS Key to use when encrypting log data. Please note, after the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly ingested data for the log group. All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever the encrypted data is requested."
  type        = string
  default     = ""
}

variable "cloudwatch_log_group_name" {
  description = "The name of the log group. If omitted, Terraform will assign a random, unique name."
  type        = string
  default     = ""
}

variable "cloudwatch_log_group_retention_in_days" {
  description = "Specifies the number of days you want to retain log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, and 0. If you select 0, the events in the log group are always retained and never expire."
  type        = number
  default     = 365
}

variable "connection_ids" {
  description = "The id of the VpcLink used for the integration. Required if connection_type is VPC_LINK"
  type        = list(any)
  default     = []
}

variable "connection_types" {
  description = "The integration input's connectionType. Valid values are INTERNET (default for connections through the public routable internet), and VPC_LINK (for private connections between API Gateway and a network load balancer in a VPC)."
  type        = list(any)
  default     = []
}

variable "content_handlings" {
  description = "Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through."
  type        = list(any)
  default     = []
}

variable "create_api_authorizer" {
  description = "A flag to indicate whether to enable api gateway authorizer."
  type        = bool
  default     = false
}

variable "create_api_integration" {
  description = "A flag to indicate whether to enable api gateway integration."
  type        = bool
  default     = false
}

variable "create_request_validator" {
  description = "A flag to indicate whether to enable api gateway request validation."
  type        = bool
  default     = false
}


variable "create_rest_api" {
  description = "A flag to indicate whether to enable api gateway rest api."
  type        = bool
  default     = false
}

variable "credentials" {
  description = "The credentials required for the integration. For AWS integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*."
  type        = list(any)
  default     = []
}

variable "domain_name" {
  description = "Fully-qualified domain name to register."
  type        = string
  default     = ""
}

variable "endpoint_type" {
  description = "The type of the endpoint. One of - PUBLIC, PRIVATE, REGIONAL"
  type        = string
  default     = "REGIONAL"
}

variable "domain_endpoint_type" {
  description = "The type of the domain endpoint. One of - PUBLIC, PRIVATE, REGIONAL"
  type        = string
  default     = "REGIONAL"
}

variable "http_methods" {
  description = "The HTTP Method (GET, POST, PUT, DELETE, HEAD, OPTIONS, ANY)."
  type        = list(any)
  default     = []
}

variable "identity_sources" {
  description = "The source of the identity in an incoming request. Defaults to method.request.header.Authorization. For REQUEST type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"
  type        = string
  default     = ""
}

variable "identity_validation_expressions" {
  description = "A validation expression for the incoming identity. For TOKEN type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response."
  type        = string
  default     = ""
}

variable "integration_http_methods" {
  description = "The integration HTTP method (GET, POST, PUT, DELETE, HEAD, OPTIONs, ANY, PATCH) specifying how API Gateway will interact with the back end. Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY. Not all methods are compatible with all AWS integrations. e.g. Lambda function can only be invoked via POST."
  type        = list(any)
  default     = []
}

variable "integration_request_parameters" {
  description = "A map of request query string parameters and headers that should be passed to the backend responder. For example: request_parameters = { \"integration.request.header.X-Some-Other-Header\" = \"method.request.header.X-Some-Header\" }."
  type        = list(any)
  default     = []
}

variable "integration_types" {
  description = "The integration input's type. Valid values are HTTP (for HTTP backends), MOCK (not calling any real backend), AWS (for AWS services), AWS_PROXY (for Lambda proxy integration) and HTTP_PROXY (for HTTP proxy integration). An HTTP or HTTP_PROXY integration with a connection_type of VPC_LINK is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC."
  type        = list(any)
  default     = []
}

variable "logging_level" {
  description = "Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are OFF, ERROR, and ."
  type        = string
  default     = "ERROR"
}

variable "metrics_enabled" {
  description = "Specifies whether Amazon CloudWatch metrics are enabled for this method."
  type        = bool
  default     = true
}

variable "data_trace_enabled" {
  description = "Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs."
  type        = bool
  default     = true
}

variable "openapi_config" {
  description = "OpenAPI specification that defines the set of routes and integrations to create as part of the REST API."
  type        = any
  default     = null
}

variable "passthrough_behaviors" {
  description = "The integration passthrough behavior (WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER). Required if request_templates is used."
  type        = list(string)
  default     = []
}

variable "path_parts" {
  description = "The last path segment of this API resource."
  type        = list(string)
  default     = []
}


variable "private_link_target_arns" {
  description = "A list of target ARNs for VPC Private Link"
  type        = list(string)
  default     = []
}

variable "provider_arns" {
  description = "A list of the Amazon Cognito user pool ARNs. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}."
  type        = list(string)
  default     = []
}

variable "request_models" {
  description = "A map of the API models used for the request's content type where key is the content type (e.g. application/json) and value is either Error, Empty (built-in models) or aws_api_gateway_model's name."
  type        = any
  default     = [{}]
}

variable "request_parameters" {
  description = "A map of request query string parameters and headers that should be passed to the integration. For example: request_parameters = {\"method.request.header.X-Some-Header\" = true \"method.request.querystring.some-query-param\" = true} would define that the header X-Some-Header and the query string some-query-param must be provided in the request."
  type        = list(map(any))
  default     = [{}]
}

variable "request_templates" {
  description = "A map of the integration's request templates."
  type        = list(map(any))
  default     = [{}]
}

variable "rest_api_name" {
  description = "Name of the REST API. If importing an OpenAPI specification via the body argument, this corresponds to the info.title field"
  type        = string
  default     = ""
}

variable "rest_api_policy" {
  description = " JSON formatted policy document that controls access to the API Gateway."
  type        = any
  default     = null
}

variable "request_validator_ids" {
  description = "The ID of a aws_api_gateway_request_validator"
  type        = string
  default     = ""
}

variable "request_validator_name" {
  description = "The name of the request validator"
  type        = string
  default     = ""
}

variable "stage" {
  description = "The name of the stage"
  type        = string
  default     = ""
}

variable "tags" {
  description = "A map of tags to assign to the object."
  type        = map(string)
  default     = {}
}

variable "timeout_milliseconds" {
  description = "Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds."
  type        = list(number)
  default     = []
}

variable "uri" {
  description = "The input's URI. Required if type is AWS, AWS_PROXY, HTTP or HTTP_PROXY. For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}. region, subdomain and service are used to determine the right endpoint. e.g. arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations."
  type        = list(string)
  default     = []
}

variable "validate_request_body" {
  description = "Boolean whether to validate request body. Defaults to false."
  type        = bool
  default     = false
}

variable "validate_request_parameters" {
  description = "Boolean whether to validate request parameters. Defaults to false."
  type        = bool
  default     = false
}

variable "xray_tracing_enabled" {
  description = "Whether active tracing with X-ray is enabled. Defaults to false."
  type        = bool
  default     = true
}
variable "api-gateway-key" {
  description = "Map of api gateway key to create"
  default     = {}
}
variable "usage_plan_description" {
  description = "The description of a usage plan."
  type        = string
  default     = ""
}

variable "usage_plan_name" {
  description = "The name of the usage plan."
  type        = string
  default     = ""
}
variable "quota_settings" {
  description = "The quota settings of the usage plan."
  type        = map(any)
  default     = {}
}

variable "throttle_settings" {
  description = "The throttling limits of the usage plan."
  type        = map(string)
  default     = {}
}

variable "usage_plan_product_code" {
  description = "The AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace."
  type        = string
  default     = ""
}

variable "default_throttling_burst_limit" {
  type    = number
  default = 5000
}

variable "default_throttling_rate_limit" {
  type    = number
  default = 10000
}

variable "api_domain_name_security_policy" {
  type        = string
  description = "Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are TLS_1_0 and TLS_1_2. Must be configured to perform drift detection."
  default     = "TLS_1_2"
}

variable "caching_enabled" {
  type        = bool
  description = "Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached."
  default     = false
}

variable "cache_data_encrypted" {
  type        = bool
  description = "Whether the cached responses are encrypted."
  default     = true
}

variable "cache_cluster_enabled" {
  type        = bool
  description = "Whether a cache cluster is enabled for the stage."
  default     = false
}

variable "cache_cluster_size" {
  type        = number
  description = "Size of the cache cluster for the stage, if enabled. Allowed values include 0.5, 1.6, 6.1, 13.5, 28.4, 58.2, 118 and 237."
  default     = 0.5
}

variable "cors_enabled" {
  type        = bool
  description = "Whether a cors configuration is enabled for the api."
  default     = false
}

variable "cors_allow_headers" {
  description = "The cross-origin resource sharing (CORS) configuration"
  type        = string
  default     = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-user-agent'"
}

variable "cors_allow_method" {
  description = "The cross-origin resource sharing (CORS) configuration"
  type        = string
  default     = "'OPTIONS,POST,GET,PUT,DELETE'"
}

variable "cors_allow_origins" {
  description = "The cross-origin resource sharing (CORS) configuration"
  type        = string
  default     = "'*'"
}

variable "binary_media_types" {
  description = "Optional) List of binary media types supported by the REST API. By default, the REST API supports only UTF-8-encoded text payloads."
  type        = list(string)
  default     = []
}



variable "create_deployment_enabled" {
  type        = bool
  description = "Create deployment api"
  default     = true
}

variable "create_stage_enabled" {
  type        = bool
  description = "Create stage "
  default     = true
}
variable "resource_tags_mandatory" {
  description = "Mandatory tags for all resources"
  type = object({
    ENV          = string
  })
}
variable "lambda_functions" {
  description = "List of lambda function names"
  type = list(string)
  default = []
  
}